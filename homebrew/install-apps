#!/usr/bin/env bash

# Interactive app installer for macOS
# Loads cask list from Brewfile and prompts for each app before installing
# Usage: ~/dotfiles/homebrew/install-apps

set -euo pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BREWFILE="${SCRIPT_DIR}/Brewfile"

# Color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Interactive App Installer ===${NC}"
echo ""

# Check if Brewfile exists
if [[ ! -f "$BREWFILE" ]]; then
    echo -e "${RED}Error: Brewfile not found at $BREWFILE${NC}"
    exit 1
fi

# Check if Homebrew is installed
if ! command -v brew &> /dev/null; then
    echo -e "${YELLOW}Homebrew is not installed.${NC}"
    read -p "Install Homebrew now? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        echo "Homebrew is required. Exiting."
        exit 1
    fi
fi

# Update Homebrew
echo -e "${BLUE}Updating Homebrew...${NC}"
brew update

# Extract casks from Brewfile and get descriptions
declare -a apps
while IFS= read -r line; do
    # Match lines like: cask "app-name"
    if [[ $line =~ ^cask[[:space:]]+\"([^\"]+)\" ]]; then
        app_name="${BASH_REMATCH[1]}"

        # Get previous line for description (if it's a comment)
        description=$(grep -B1 "^cask \"$app_name\"" "$BREWFILE" | grep "^#" | sed 's/^# *//' || echo "No description")

        apps+=("$app_name:$description")
    fi
done < "$BREWFILE"

# Check if we found any casks
if [[ ${#apps[@]} -eq 0 ]]; then
    echo -e "${YELLOW}No casks found in Brewfile${NC}"
    exit 0
fi

echo -e "${GREEN}Found ${#apps[@]} apps in Brewfile${NC}"
echo ""

# Check if app is already installed
is_installed() {
    brew list --cask "$1" &>/dev/null
}

# Install apps
installed_count=0
skipped_count=0
failed_count=0
declare -a failed_apps

for entry in "${apps[@]}"; do
    # Split app and description
    app="${entry%%:*}"
    description="${entry#*:}"

    echo ""
    echo -e "${BLUE}────────────────────────────────────${NC}"
    echo -e "${GREEN}App:${NC} $app"
    echo -e "${GREEN}Description:${NC} $description"

    if is_installed "$app"; then
        echo -e "${YELLOW}Already installed ✓${NC}"
        skipped_count=$((skipped_count + 1))
        continue
    fi

    read -p "Install this app? (y/n) " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Installing $app...${NC}"
        if brew install --cask "$app"; then
            echo -e "${GREEN}✓ Installed $app${NC}"
            installed_count=$((installed_count + 1))
        else
            echo -e "${RED}✗ Failed to install $app${NC}"
            failed_apps+=("$app")
            failed_count=$((failed_count + 1))
        fi
    else
        echo -e "${YELLOW}Skipped $app${NC}"
        skipped_count=$((skipped_count + 1))
    fi
done

# Summary
echo ""
echo -e "${BLUE}=== Installation Summary ===${NC}"
echo -e "${GREEN}Installed: $installed_count apps${NC}"
echo -e "${YELLOW}Skipped: $skipped_count apps${NC}"

if [[ $failed_count -gt 0 ]]; then
    echo -e "${RED}Failed: $failed_count apps${NC}"
    echo -e "${RED}Failed apps: ${failed_apps[*]}${NC}"
fi
echo ""

# Cleanup
if [[ $installed_count -gt 0 ]]; then
    echo -e "${BLUE}Running brew cleanup...${NC}"
    brew cleanup
    echo -e "${GREEN}✓ Cleanup complete${NC}"
fi

# Exit with error code if any installations failed
if [[ $failed_count -gt 0 ]]; then
    exit 1
fi
